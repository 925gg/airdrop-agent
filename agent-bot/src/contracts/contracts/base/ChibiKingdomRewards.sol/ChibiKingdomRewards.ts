/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type KingdomEventStruct = {
  eventId: BigNumberish;
  status: BigNumberish;
  rewardsExpiredAt: BigNumberish;
  totalRewards: BigNumberish;
  rewardsAssigned: BigNumberish;
  rewardsClaimed: BigNumberish;
  name: string;
};

export type KingdomEventStructOutput = [
  eventId: bigint,
  status: bigint,
  rewardsExpiredAt: bigint,
  totalRewards: bigint,
  rewardsAssigned: bigint,
  rewardsClaimed: bigint,
  name: string
] & {
  eventId: bigint;
  status: bigint;
  rewardsExpiredAt: bigint;
  totalRewards: bigint;
  rewardsAssigned: bigint;
  rewardsClaimed: bigint;
  name: string;
};

export type UserEventRewardStruct = {
  eventId: BigNumberish;
  topPlayerReward: BigNumberish;
  landOwnerTax: BigNumberish;
  rewardClaimed: boolean;
  taxClaimed: boolean;
};

export type UserEventRewardStructOutput = [
  eventId: bigint,
  topPlayerReward: bigint,
  landOwnerTax: bigint,
  rewardClaimed: boolean,
  taxClaimed: boolean
] & {
  eventId: bigint;
  topPlayerReward: bigint;
  landOwnerTax: bigint;
  rewardClaimed: boolean;
  taxClaimed: boolean;
};

export interface ChibiKingdomRewardsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "addEvenRewards"
      | "addEvent"
      | "addLandTaxes"
      | "claimReward"
      | "claimRewardAndStake"
      | "clashStaking"
      | "clashToken"
      | "eventTaxes"
      | "eventTopPlayers"
      | "getActiveEvents"
      | "getEventRewards"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "kingdomEvents"
      | "removeEventRewards"
      | "removeLandTaxes"
      | "renounceRole"
      | "revokeRole"
      | "setClashStaking"
      | "setClashToken"
      | "setEventStatus"
      | "setVerifier"
      | "supportsInterface"
      | "totalEvents"
      | "updateEvent"
      | "verifier"
      | "withdrawClashToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EventAdded"
      | "EventUpdated"
      | "Initialized"
      | "LandOwnerTaxesAdded"
      | "LandOwnerTaxesRemoved"
      | "RewardClaimed"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TaxClaimed"
      | "TopPlayerRewardsAdded"
      | "TopPlayerRewardsRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addEvenRewards",
    values: [BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addEvent",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLandTaxes",
    values: [BigNumberish, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardAndStake",
    values: [BigNumberish, string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clashStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clashToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventTaxes",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eventTopPlayers",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveEvents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEventRewards",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "kingdomEvents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeEventRewards",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLandTaxes",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setClashStaking",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setClashToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEventStatus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalEvents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateEvent",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawClashToken",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEvenRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addEvent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLandTaxes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardAndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clashStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clashToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eventTaxes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventTopPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kingdomEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeEventRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLandTaxes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClashStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClashToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEventStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawClashToken",
    data: BytesLike
  ): Result;
}

export namespace EventAddedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    totalRewards: BigNumberish,
    rewardsExpiredAt: BigNumberish,
    name: string
  ];
  export type OutputTuple = [
    eventId: bigint,
    totalRewards: bigint,
    rewardsExpiredAt: bigint,
    name: string
  ];
  export interface OutputObject {
    eventId: bigint;
    totalRewards: bigint;
    rewardsExpiredAt: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventUpdatedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    totalRewards: BigNumberish,
    rewardsExpiredAt: BigNumberish,
    name: string
  ];
  export type OutputTuple = [
    eventId: bigint,
    totalRewards: bigint,
    rewardsExpiredAt: bigint,
    name: string
  ];
  export interface OutputObject {
    eventId: bigint;
    totalRewards: bigint;
    rewardsExpiredAt: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LandOwnerTaxesAddedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    landOwners: AddressLike[],
    taxes: BigNumberish[]
  ];
  export type OutputTuple = [
    eventId: bigint,
    landOwners: string[],
    taxes: bigint[]
  ];
  export interface OutputObject {
    eventId: bigint;
    landOwners: string[];
    taxes: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LandOwnerTaxesRemovedEvent {
  export type InputTuple = [eventId: BigNumberish, landOwners: AddressLike[]];
  export type OutputTuple = [eventId: bigint, landOwners: string[]];
  export interface OutputObject {
    eventId: bigint;
    landOwners: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    player: AddressLike,
    hashUserId: BytesLike,
    rewards: BigNumberish
  ];
  export type OutputTuple = [
    eventId: bigint,
    player: string,
    hashUserId: string,
    rewards: bigint
  ];
  export interface OutputObject {
    eventId: bigint;
    player: string;
    hashUserId: string;
    rewards: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaxClaimedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    landOwner: AddressLike,
    tax: BigNumberish
  ];
  export type OutputTuple = [eventId: bigint, landOwner: string, tax: bigint];
  export interface OutputObject {
    eventId: bigint;
    landOwner: string;
    tax: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TopPlayerRewardsAddedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    players: string[],
    rewards: BigNumberish[]
  ];
  export type OutputTuple = [
    eventId: bigint,
    players: string[],
    rewards: bigint[]
  ];
  export interface OutputObject {
    eventId: bigint;
    players: string[];
    rewards: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TopPlayerRewardsRemovedEvent {
  export type InputTuple = [eventId: BigNumberish, players: string[]];
  export type OutputTuple = [eventId: bigint, players: string[]];
  export interface OutputObject {
    eventId: bigint;
    players: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChibiKingdomRewards extends BaseContract {
  connect(runner?: ContractRunner | null): ChibiKingdomRewards;
  waitForDeployment(): Promise<this>;

  interface: ChibiKingdomRewardsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  addEvenRewards: TypedContractMethod<
    [eventId: BigNumberish, userIds: string[], rewards: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  addEvent: TypedContractMethod<
    [totalRewards: BigNumberish, rewardsExpiredAt: BigNumberish, name: string],
    [void],
    "nonpayable"
  >;

  addLandTaxes: TypedContractMethod<
    [eventId: BigNumberish, landOwners: AddressLike[], taxes: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  claimReward: TypedContractMethod<
    [
      eventId: BigNumberish,
      userId: string,
      signature: BytesLike,
      expiredAt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  claimRewardAndStake: TypedContractMethod<
    [
      eventId: BigNumberish,
      userId: string,
      signature: BytesLike,
      expiredAt: BigNumberish,
      lockPeriod: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  clashStaking: TypedContractMethod<[], [string], "view">;

  clashToken: TypedContractMethod<[], [string], "view">;

  eventTaxes: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[bigint, boolean] & { tax: bigint; claimed: boolean }],
    "view"
  >;

  eventTopPlayers: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [[bigint, boolean] & { rewards: bigint; claimed: boolean }],
    "view"
  >;

  getActiveEvents: TypedContractMethod<
    [],
    [KingdomEventStructOutput[]],
    "view"
  >;

  getEventRewards: TypedContractMethod<
    [wallet: AddressLike, userId: string],
    [UserEventRewardStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      clashToken_: AddressLike,
      verifier_: AddressLike,
      clashStaking_: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  kingdomEvents: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, string] & {
        eventId: bigint;
        status: bigint;
        rewardsExpiredAt: bigint;
        totalRewards: bigint;
        rewardsAssigned: bigint;
        rewardsClaimed: bigint;
        name: string;
      }
    ],
    "view"
  >;

  removeEventRewards: TypedContractMethod<
    [eventId: BigNumberish, userIds: string[]],
    [void],
    "nonpayable"
  >;

  removeLandTaxes: TypedContractMethod<
    [eventId: BigNumberish, landOwners: AddressLike[]],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setClashStaking: TypedContractMethod<
    [clashStaking_: AddressLike],
    [void],
    "nonpayable"
  >;

  setClashToken: TypedContractMethod<
    [clashToken_: AddressLike],
    [void],
    "nonpayable"
  >;

  setEventStatus: TypedContractMethod<
    [eventId: BigNumberish, status: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVerifier: TypedContractMethod<
    [verifier_: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalEvents: TypedContractMethod<[], [bigint], "view">;

  updateEvent: TypedContractMethod<
    [
      eventId: BigNumberish,
      totalRewards: BigNumberish,
      rewardsExpiredAt: BigNumberish,
      name: string
    ],
    [void],
    "nonpayable"
  >;

  verifier: TypedContractMethod<[], [string], "view">;

  withdrawClashToken: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addEvenRewards"
  ): TypedContractMethod<
    [eventId: BigNumberish, userIds: string[], rewards: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addEvent"
  ): TypedContractMethod<
    [totalRewards: BigNumberish, rewardsExpiredAt: BigNumberish, name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLandTaxes"
  ): TypedContractMethod<
    [eventId: BigNumberish, landOwners: AddressLike[], taxes: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<
    [
      eventId: BigNumberish,
      userId: string,
      signature: BytesLike,
      expiredAt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRewardAndStake"
  ): TypedContractMethod<
    [
      eventId: BigNumberish,
      userId: string,
      signature: BytesLike,
      expiredAt: BigNumberish,
      lockPeriod: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "clashStaking"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "clashToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eventTaxes"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[bigint, boolean] & { tax: bigint; claimed: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "eventTopPlayers"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [[bigint, boolean] & { rewards: bigint; claimed: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getActiveEvents"
  ): TypedContractMethod<[], [KingdomEventStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getEventRewards"
  ): TypedContractMethod<
    [wallet: AddressLike, userId: string],
    [UserEventRewardStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      clashToken_: AddressLike,
      verifier_: AddressLike,
      clashStaking_: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "kingdomEvents"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, string] & {
        eventId: bigint;
        status: bigint;
        rewardsExpiredAt: bigint;
        totalRewards: bigint;
        rewardsAssigned: bigint;
        rewardsClaimed: bigint;
        name: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeEventRewards"
  ): TypedContractMethod<
    [eventId: BigNumberish, userIds: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLandTaxes"
  ): TypedContractMethod<
    [eventId: BigNumberish, landOwners: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setClashStaking"
  ): TypedContractMethod<[clashStaking_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setClashToken"
  ): TypedContractMethod<[clashToken_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEventStatus"
  ): TypedContractMethod<
    [eventId: BigNumberish, status: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVerifier"
  ): TypedContractMethod<[verifier_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalEvents"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateEvent"
  ): TypedContractMethod<
    [
      eventId: BigNumberish,
      totalRewards: BigNumberish,
      rewardsExpiredAt: BigNumberish,
      name: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawClashToken"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "EventAdded"
  ): TypedContractEvent<
    EventAddedEvent.InputTuple,
    EventAddedEvent.OutputTuple,
    EventAddedEvent.OutputObject
  >;
  getEvent(
    key: "EventUpdated"
  ): TypedContractEvent<
    EventUpdatedEvent.InputTuple,
    EventUpdatedEvent.OutputTuple,
    EventUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LandOwnerTaxesAdded"
  ): TypedContractEvent<
    LandOwnerTaxesAddedEvent.InputTuple,
    LandOwnerTaxesAddedEvent.OutputTuple,
    LandOwnerTaxesAddedEvent.OutputObject
  >;
  getEvent(
    key: "LandOwnerTaxesRemoved"
  ): TypedContractEvent<
    LandOwnerTaxesRemovedEvent.InputTuple,
    LandOwnerTaxesRemovedEvent.OutputTuple,
    LandOwnerTaxesRemovedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TaxClaimed"
  ): TypedContractEvent<
    TaxClaimedEvent.InputTuple,
    TaxClaimedEvent.OutputTuple,
    TaxClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TopPlayerRewardsAdded"
  ): TypedContractEvent<
    TopPlayerRewardsAddedEvent.InputTuple,
    TopPlayerRewardsAddedEvent.OutputTuple,
    TopPlayerRewardsAddedEvent.OutputObject
  >;
  getEvent(
    key: "TopPlayerRewardsRemoved"
  ): TypedContractEvent<
    TopPlayerRewardsRemovedEvent.InputTuple,
    TopPlayerRewardsRemovedEvent.OutputTuple,
    TopPlayerRewardsRemovedEvent.OutputObject
  >;

  filters: {
    "EventAdded(uint256,uint256,uint256,string)": TypedContractEvent<
      EventAddedEvent.InputTuple,
      EventAddedEvent.OutputTuple,
      EventAddedEvent.OutputObject
    >;
    EventAdded: TypedContractEvent<
      EventAddedEvent.InputTuple,
      EventAddedEvent.OutputTuple,
      EventAddedEvent.OutputObject
    >;

    "EventUpdated(uint256,uint256,uint256,string)": TypedContractEvent<
      EventUpdatedEvent.InputTuple,
      EventUpdatedEvent.OutputTuple,
      EventUpdatedEvent.OutputObject
    >;
    EventUpdated: TypedContractEvent<
      EventUpdatedEvent.InputTuple,
      EventUpdatedEvent.OutputTuple,
      EventUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LandOwnerTaxesAdded(uint256,address[],uint256[])": TypedContractEvent<
      LandOwnerTaxesAddedEvent.InputTuple,
      LandOwnerTaxesAddedEvent.OutputTuple,
      LandOwnerTaxesAddedEvent.OutputObject
    >;
    LandOwnerTaxesAdded: TypedContractEvent<
      LandOwnerTaxesAddedEvent.InputTuple,
      LandOwnerTaxesAddedEvent.OutputTuple,
      LandOwnerTaxesAddedEvent.OutputObject
    >;

    "LandOwnerTaxesRemoved(uint256,address[])": TypedContractEvent<
      LandOwnerTaxesRemovedEvent.InputTuple,
      LandOwnerTaxesRemovedEvent.OutputTuple,
      LandOwnerTaxesRemovedEvent.OutputObject
    >;
    LandOwnerTaxesRemoved: TypedContractEvent<
      LandOwnerTaxesRemovedEvent.InputTuple,
      LandOwnerTaxesRemovedEvent.OutputTuple,
      LandOwnerTaxesRemovedEvent.OutputObject
    >;

    "RewardClaimed(uint256,address,bytes32,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TaxClaimed(uint256,address,uint256)": TypedContractEvent<
      TaxClaimedEvent.InputTuple,
      TaxClaimedEvent.OutputTuple,
      TaxClaimedEvent.OutputObject
    >;
    TaxClaimed: TypedContractEvent<
      TaxClaimedEvent.InputTuple,
      TaxClaimedEvent.OutputTuple,
      TaxClaimedEvent.OutputObject
    >;

    "TopPlayerRewardsAdded(uint256,string[],uint256[])": TypedContractEvent<
      TopPlayerRewardsAddedEvent.InputTuple,
      TopPlayerRewardsAddedEvent.OutputTuple,
      TopPlayerRewardsAddedEvent.OutputObject
    >;
    TopPlayerRewardsAdded: TypedContractEvent<
      TopPlayerRewardsAddedEvent.InputTuple,
      TopPlayerRewardsAddedEvent.OutputTuple,
      TopPlayerRewardsAddedEvent.OutputObject
    >;

    "TopPlayerRewardsRemoved(uint256,string[])": TypedContractEvent<
      TopPlayerRewardsRemovedEvent.InputTuple,
      TopPlayerRewardsRemovedEvent.OutputTuple,
      TopPlayerRewardsRemovedEvent.OutputObject
    >;
    TopPlayerRewardsRemoved: TypedContractEvent<
      TopPlayerRewardsRemovedEvent.InputTuple,
      TopPlayerRewardsRemovedEvent.OutputTuple,
      TopPlayerRewardsRemovedEvent.OutputObject
    >;
  };
}
