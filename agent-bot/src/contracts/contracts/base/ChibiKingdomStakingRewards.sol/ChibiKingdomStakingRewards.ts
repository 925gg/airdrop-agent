/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type UserWeeklyRewardWithWeekNoStruct = {
  weekNo: BigNumberish;
  rank: BigNumberish;
  tokensStaked: BigNumberish;
  topStakingReward: BigNumberish;
  standardReward: BigNumberish;
  claimed: boolean;
  claimable: boolean;
  claimableAt: BigNumberish;
  transactionIds: BigNumberish[];
};

export type UserWeeklyRewardWithWeekNoStructOutput = [
  weekNo: bigint,
  rank: bigint,
  tokensStaked: bigint,
  topStakingReward: bigint,
  standardReward: bigint,
  claimed: boolean,
  claimable: boolean,
  claimableAt: bigint,
  transactionIds: bigint[]
] & {
  weekNo: bigint;
  rank: bigint;
  tokensStaked: bigint;
  topStakingReward: bigint;
  standardReward: bigint;
  claimed: boolean;
  claimable: boolean;
  claimableAt: bigint;
  transactionIds: bigint[];
};

export interface ChibiKingdomStakingRewardsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "assignWeeklyRewardsPart1"
      | "assignWeeklyRewardsPart2"
      | "assignWeeklyRewardsPart3"
      | "claimRewards"
      | "claimRewardsAndStake"
      | "clashStaking"
      | "clashToken"
      | "getActiveRewardsWeeks"
      | "getRewardsWeeks"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "removeWeeklyRewards"
      | "renounceRole"
      | "revokeRole"
      | "rewardWeeks"
      | "setClashStaking"
      | "setClashToken"
      | "setStartTime"
      | "startTime"
      | "supportsInterface"
      | "weeklyRewards"
      | "withdrawClashToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "WeeklyRewardsClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assignWeeklyRewardsPart1",
    values: [BigNumberish, AddressLike[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "assignWeeklyRewardsPart2",
    values: [BigNumberish, AddressLike[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "assignWeeklyRewardsPart3",
    values: [BigNumberish, AddressLike[], BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardsAndStake",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clashStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clashToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveRewardsWeeks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsWeeks",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWeeklyRewards",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardWeeks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClashStaking",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setClashToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStartTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "weeklyRewards",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawClashToken",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignWeeklyRewardsPart1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignWeeklyRewardsPart2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignWeeklyRewardsPart3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardsAndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clashStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clashToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveRewardsWeeks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsWeeks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWeeklyRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardWeeks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClashStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClashToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weeklyRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawClashToken",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WeeklyRewardsClaimedEvent {
  export type InputTuple = [
    weekNo: BigNumberish,
    user: AddressLike,
    rewards: BigNumberish
  ];
  export type OutputTuple = [weekNo: bigint, user: string, rewards: bigint];
  export interface OutputObject {
    weekNo: bigint;
    user: string;
    rewards: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChibiKingdomStakingRewards extends BaseContract {
  connect(runner?: ContractRunner | null): ChibiKingdomStakingRewards;
  waitForDeployment(): Promise<this>;

  interface: ChibiKingdomStakingRewardsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  assignWeeklyRewardsPart1: TypedContractMethod<
    [
      weekNo: BigNumberish,
      users: AddressLike[],
      ranks: BigNumberish[],
      tokensStaked: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  assignWeeklyRewardsPart2: TypedContractMethod<
    [
      weekNo: BigNumberish,
      users: AddressLike[],
      topStakingRewards: BigNumberish[],
      standardRewards: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  assignWeeklyRewardsPart3: TypedContractMethod<
    [
      weekNo: BigNumberish,
      users: AddressLike[],
      transactionIds: BigNumberish[][]
    ],
    [void],
    "nonpayable"
  >;

  claimRewards: TypedContractMethod<
    [weekNos: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  claimRewardsAndStake: TypedContractMethod<
    [weekNos: BigNumberish[], lockPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  clashStaking: TypedContractMethod<[], [string], "view">;

  clashToken: TypedContractMethod<[], [string], "view">;

  getActiveRewardsWeeks: TypedContractMethod<
    [user: AddressLike],
    [UserWeeklyRewardWithWeekNoStructOutput[]],
    "view"
  >;

  getRewardsWeeks: TypedContractMethod<
    [user: AddressLike, weekNos: BigNumberish[]],
    [UserWeeklyRewardWithWeekNoStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      clashToken_: AddressLike,
      clashStaking_: AddressLike,
      startTime_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  removeWeeklyRewards: TypedContractMethod<
    [weekNo: BigNumberish, users: AddressLike[]],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  rewardWeeks: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        topStakingRewardsAssigned: bigint;
        standardRewardsAssigned: bigint;
        totalUsers: bigint;
        usersClaimed: bigint;
        rewardsClaimed: bigint;
      }
    ],
    "view"
  >;

  setClashStaking: TypedContractMethod<
    [clashStaking_: AddressLike],
    [void],
    "nonpayable"
  >;

  setClashToken: TypedContractMethod<
    [clashToken_: AddressLike],
    [void],
    "nonpayable"
  >;

  setStartTime: TypedContractMethod<
    [startTime_: BigNumberish],
    [void],
    "nonpayable"
  >;

  startTime: TypedContractMethod<[], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  weeklyRewards: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        rank: bigint;
        tokensStaked: bigint;
        topStakingReward: bigint;
        standardReward: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;

  withdrawClashToken: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assignWeeklyRewardsPart1"
  ): TypedContractMethod<
    [
      weekNo: BigNumberish,
      users: AddressLike[],
      ranks: BigNumberish[],
      tokensStaked: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assignWeeklyRewardsPart2"
  ): TypedContractMethod<
    [
      weekNo: BigNumberish,
      users: AddressLike[],
      topStakingRewards: BigNumberish[],
      standardRewards: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assignWeeklyRewardsPart3"
  ): TypedContractMethod<
    [
      weekNo: BigNumberish,
      users: AddressLike[],
      transactionIds: BigNumberish[][]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[weekNos: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimRewardsAndStake"
  ): TypedContractMethod<
    [weekNos: BigNumberish[], lockPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "clashStaking"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "clashToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getActiveRewardsWeeks"
  ): TypedContractMethod<
    [user: AddressLike],
    [UserWeeklyRewardWithWeekNoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRewardsWeeks"
  ): TypedContractMethod<
    [user: AddressLike, weekNos: BigNumberish[]],
    [UserWeeklyRewardWithWeekNoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      clashToken_: AddressLike,
      clashStaking_: AddressLike,
      startTime_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeWeeklyRewards"
  ): TypedContractMethod<
    [weekNo: BigNumberish, users: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardWeeks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        topStakingRewardsAssigned: bigint;
        standardRewardsAssigned: bigint;
        totalUsers: bigint;
        usersClaimed: bigint;
        rewardsClaimed: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setClashStaking"
  ): TypedContractMethod<[clashStaking_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setClashToken"
  ): TypedContractMethod<[clashToken_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStartTime"
  ): TypedContractMethod<[startTime_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "weeklyRewards"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        rank: bigint;
        tokensStaked: bigint;
        topStakingReward: bigint;
        standardReward: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawClashToken"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "WeeklyRewardsClaimed"
  ): TypedContractEvent<
    WeeklyRewardsClaimedEvent.InputTuple,
    WeeklyRewardsClaimedEvent.OutputTuple,
    WeeklyRewardsClaimedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "WeeklyRewardsClaimed(uint256,address,uint256)": TypedContractEvent<
      WeeklyRewardsClaimedEvent.InputTuple,
      WeeklyRewardsClaimedEvent.OutputTuple,
      WeeklyRewardsClaimedEvent.OutputObject
    >;
    WeeklyRewardsClaimed: TypedContractEvent<
      WeeklyRewardsClaimedEvent.InputTuple,
      WeeklyRewardsClaimedEvent.OutputTuple,
      WeeklyRewardsClaimedEvent.OutputObject
    >;
  };
}
