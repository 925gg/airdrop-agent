/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type ExtraMintMetadataStruct = {
  totalSupply: BigNumberish;
  totalMinted: BigNumberish;
  mintEndTime: BigNumberish;
  mintEnabled: boolean;
};

export type ExtraMintMetadataStructOutput = [
  totalSupply: bigint,
  totalMinted: bigint,
  mintEndTime: bigint,
  mintEnabled: boolean
] & {
  totalSupply: bigint;
  totalMinted: bigint;
  mintEndTime: bigint;
  mintEnabled: boolean;
};

export interface ChibiKingdomExtraMintInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "assignSlots"
      | "chibiKingdom"
      | "getMetadata"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "mint"
      | "mintEnabled"
      | "mintEndTime"
      | "removeSlots"
      | "renounceRole"
      | "revokeRole"
      | "setChibiKingdom"
      | "setMintEnabled"
      | "setMintEndTime"
      | "setTotalSupply"
      | "supportsInterface"
      | "totalMinted"
      | "totalSupply"
      | "users"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssignedSlots"
      | "ExtraMinted"
      | "Initialized"
      | "RemovedSlots"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assignSlots",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "chibiKingdom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "mintEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeSlots",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setChibiKingdom",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "users", values: [AddressLike]): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignSlots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chibiKingdom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSlots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setChibiKingdom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
}

export namespace AssignedSlotsEvent {
  export type InputTuple = [users: AddressLike[], slots: BigNumberish[]];
  export type OutputTuple = [users: string[], slots: bigint[]];
  export interface OutputObject {
    users: string[];
    slots: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExtraMintedEvent {
  export type InputTuple = [user: AddressLike, numberOfTokens: BigNumberish];
  export type OutputTuple = [user: string, numberOfTokens: bigint];
  export interface OutputObject {
    user: string;
    numberOfTokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovedSlotsEvent {
  export type InputTuple = [users: AddressLike[], slots: BigNumberish[]];
  export type OutputTuple = [users: string[], slots: bigint[]];
  export interface OutputObject {
    users: string[];
    slots: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChibiKingdomExtraMint extends BaseContract {
  connect(runner?: ContractRunner | null): ChibiKingdomExtraMint;
  waitForDeployment(): Promise<this>;

  interface: ChibiKingdomExtraMintInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  assignSlots: TypedContractMethod<
    [users_: AddressLike[], slots: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  chibiKingdom: TypedContractMethod<[], [string], "view">;

  getMetadata: TypedContractMethod<[], [ExtraMintMetadataStructOutput], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [chibiKingdom_: AddressLike],
    [void],
    "nonpayable"
  >;

  mint: TypedContractMethod<
    [numberOfTokens: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintEnabled: TypedContractMethod<[], [boolean], "view">;

  mintEndTime: TypedContractMethod<[], [bigint], "view">;

  removeSlots: TypedContractMethod<
    [users_: AddressLike[], slots: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setChibiKingdom: TypedContractMethod<
    [chibiKingdom_: AddressLike],
    [void],
    "nonpayable"
  >;

  setMintEnabled: TypedContractMethod<[enabled: boolean], [void], "nonpayable">;

  setMintEndTime: TypedContractMethod<
    [mintEndTime_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTotalSupply: TypedContractMethod<
    [totalSupply_: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalMinted: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  users: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { assigned: bigint; minted: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assignSlots"
  ): TypedContractMethod<
    [users_: AddressLike[], slots: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "chibiKingdom"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMetadata"
  ): TypedContractMethod<[], [ExtraMintMetadataStructOutput], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[chibiKingdom_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<[numberOfTokens: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mintEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeSlots"
  ): TypedContractMethod<
    [users_: AddressLike[], slots: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setChibiKingdom"
  ): TypedContractMethod<[chibiKingdom_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMintEnabled"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMintEndTime"
  ): TypedContractMethod<[mintEndTime_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTotalSupply"
  ): TypedContractMethod<[totalSupply_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalMinted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "users"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { assigned: bigint; minted: bigint }],
    "view"
  >;

  getEvent(
    key: "AssignedSlots"
  ): TypedContractEvent<
    AssignedSlotsEvent.InputTuple,
    AssignedSlotsEvent.OutputTuple,
    AssignedSlotsEvent.OutputObject
  >;
  getEvent(
    key: "ExtraMinted"
  ): TypedContractEvent<
    ExtraMintedEvent.InputTuple,
    ExtraMintedEvent.OutputTuple,
    ExtraMintedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RemovedSlots"
  ): TypedContractEvent<
    RemovedSlotsEvent.InputTuple,
    RemovedSlotsEvent.OutputTuple,
    RemovedSlotsEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "AssignedSlots(address[],uint256[])": TypedContractEvent<
      AssignedSlotsEvent.InputTuple,
      AssignedSlotsEvent.OutputTuple,
      AssignedSlotsEvent.OutputObject
    >;
    AssignedSlots: TypedContractEvent<
      AssignedSlotsEvent.InputTuple,
      AssignedSlotsEvent.OutputTuple,
      AssignedSlotsEvent.OutputObject
    >;

    "ExtraMinted(address,uint256)": TypedContractEvent<
      ExtraMintedEvent.InputTuple,
      ExtraMintedEvent.OutputTuple,
      ExtraMintedEvent.OutputObject
    >;
    ExtraMinted: TypedContractEvent<
      ExtraMintedEvent.InputTuple,
      ExtraMintedEvent.OutputTuple,
      ExtraMintedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RemovedSlots(address[],uint256[])": TypedContractEvent<
      RemovedSlotsEvent.InputTuple,
      RemovedSlotsEvent.OutputTuple,
      RemovedSlotsEvent.OutputObject
    >;
    RemovedSlots: TypedContractEvent<
      RemovedSlotsEvent.InputTuple,
      RemovedSlotsEvent.OutputTuple,
      RemovedSlotsEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
