/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type RaffleDateStruct = {
  numberOfEntries: BigNumberish;
  landDistributed: boolean;
  winner: AddressLike;
};

export type RaffleDateStructOutput = [
  numberOfEntries: bigint,
  landDistributed: boolean,
  winner: string
] & { numberOfEntries: bigint; landDistributed: boolean; winner: string };

export interface ChibiBattleOfNationsRaffleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "MAX_ENTRIES_PER_DAY"
      | "chibiKingdom"
      | "distributeLands"
      | "endDate"
      | "getNumberOfEntries"
      | "getRaffleDates"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "joinRaffle"
      | "pickWinners"
      | "raffleDates"
      | "rafflePlayers"
      | "rafflePositions"
      | "renounceRole"
      | "revokeRole"
      | "setChibiKingdom"
      | "setDates"
      | "setVerifier"
      | "startDate"
      | "supportsInterface"
      | "verifier"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "LandDistributed"
      | "RaffleJoined"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "WinnerPicked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ENTRIES_PER_DAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chibiKingdom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeLands",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "endDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNumberOfEntries",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaffleDates",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinRaffle",
    values: [BigNumberish, string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pickWinners",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "raffleDates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rafflePlayers",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rafflePositions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setChibiKingdom",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDates",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ENTRIES_PER_DAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chibiKingdom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeLands",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRaffleDates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinRaffle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pickWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raffleDates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rafflePlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rafflePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setChibiKingdom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LandDistributedEvent {
  export type InputTuple = [date: BigNumberish, wallet: AddressLike];
  export type OutputTuple = [date: bigint, wallet: string];
  export interface OutputObject {
    date: bigint;
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RaffleJoinedEvent {
  export type InputTuple = [
    date: BigNumberish,
    userId: string,
    numberOfEntries: BigNumberish,
    wallet: AddressLike
  ];
  export type OutputTuple = [
    date: bigint,
    userId: string,
    numberOfEntries: bigint,
    wallet: string
  ];
  export interface OutputObject {
    date: bigint;
    userId: string;
    numberOfEntries: bigint;
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerPickedEvent {
  export type InputTuple = [date: BigNumberish, wallet: AddressLike];
  export type OutputTuple = [date: bigint, wallet: string];
  export interface OutputObject {
    date: bigint;
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChibiBattleOfNationsRaffle extends BaseContract {
  connect(runner?: ContractRunner | null): ChibiBattleOfNationsRaffle;
  waitForDeployment(): Promise<this>;

  interface: ChibiBattleOfNationsRaffleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_ENTRIES_PER_DAY: TypedContractMethod<[], [bigint], "view">;

  chibiKingdom: TypedContractMethod<[], [string], "view">;

  distributeLands: TypedContractMethod<
    [dates: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  endDate: TypedContractMethod<[], [bigint], "view">;

  getNumberOfEntries: TypedContractMethod<
    [date: BigNumberish, userId: string],
    [bigint],
    "view"
  >;

  getRaffleDates: TypedContractMethod<
    [dates: BigNumberish[]],
    [RaffleDateStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      chibiKingdom_: AddressLike,
      verifier_: AddressLike,
      startDate_: BigNumberish,
      endDate_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  joinRaffle: TypedContractMethod<
    [
      date: BigNumberish,
      userId: string,
      numberOfEntries: BigNumberish,
      signature: BytesLike,
      expiredAt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  pickWinners: TypedContractMethod<
    [dates: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  raffleDates: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, boolean, string] & {
        numberOfEntries: bigint;
        landDistributed: boolean;
        winner: string;
      }
    ],
    "view"
  >;

  rafflePlayers: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [[bigint, string] & { numberOfEntries: bigint; wallet: string }],
    "view"
  >;

  rafflePositions: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setChibiKingdom: TypedContractMethod<
    [chibiKingdom_: AddressLike],
    [void],
    "nonpayable"
  >;

  setDates: TypedContractMethod<
    [startDate_: BigNumberish, endDate_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVerifier: TypedContractMethod<
    [verifier_: AddressLike],
    [void],
    "nonpayable"
  >;

  startDate: TypedContractMethod<[], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  verifier: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_ENTRIES_PER_DAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "chibiKingdom"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "distributeLands"
  ): TypedContractMethod<[dates: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNumberOfEntries"
  ): TypedContractMethod<
    [date: BigNumberish, userId: string],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRaffleDates"
  ): TypedContractMethod<
    [dates: BigNumberish[]],
    [RaffleDateStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      chibiKingdom_: AddressLike,
      verifier_: AddressLike,
      startDate_: BigNumberish,
      endDate_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "joinRaffle"
  ): TypedContractMethod<
    [
      date: BigNumberish,
      userId: string,
      numberOfEntries: BigNumberish,
      signature: BytesLike,
      expiredAt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pickWinners"
  ): TypedContractMethod<[dates: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "raffleDates"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, boolean, string] & {
        numberOfEntries: bigint;
        landDistributed: boolean;
        winner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rafflePlayers"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [[bigint, string] & { numberOfEntries: bigint; wallet: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "rafflePositions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setChibiKingdom"
  ): TypedContractMethod<[chibiKingdom_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDates"
  ): TypedContractMethod<
    [startDate_: BigNumberish, endDate_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVerifier"
  ): TypedContractMethod<[verifier_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LandDistributed"
  ): TypedContractEvent<
    LandDistributedEvent.InputTuple,
    LandDistributedEvent.OutputTuple,
    LandDistributedEvent.OutputObject
  >;
  getEvent(
    key: "RaffleJoined"
  ): TypedContractEvent<
    RaffleJoinedEvent.InputTuple,
    RaffleJoinedEvent.OutputTuple,
    RaffleJoinedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "WinnerPicked"
  ): TypedContractEvent<
    WinnerPickedEvent.InputTuple,
    WinnerPickedEvent.OutputTuple,
    WinnerPickedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LandDistributed(uint256,address)": TypedContractEvent<
      LandDistributedEvent.InputTuple,
      LandDistributedEvent.OutputTuple,
      LandDistributedEvent.OutputObject
    >;
    LandDistributed: TypedContractEvent<
      LandDistributedEvent.InputTuple,
      LandDistributedEvent.OutputTuple,
      LandDistributedEvent.OutputObject
    >;

    "RaffleJoined(uint256,string,uint256,address)": TypedContractEvent<
      RaffleJoinedEvent.InputTuple,
      RaffleJoinedEvent.OutputTuple,
      RaffleJoinedEvent.OutputObject
    >;
    RaffleJoined: TypedContractEvent<
      RaffleJoinedEvent.InputTuple,
      RaffleJoinedEvent.OutputTuple,
      RaffleJoinedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "WinnerPicked(uint256,address)": TypedContractEvent<
      WinnerPickedEvent.InputTuple,
      WinnerPickedEvent.OutputTuple,
      WinnerPickedEvent.OutputObject
    >;
    WinnerPicked: TypedContractEvent<
      WinnerPickedEvent.InputTuple,
      WinnerPickedEvent.OutputTuple,
      WinnerPickedEvent.OutputObject
    >;
  };
}
