/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ChibiKingdomRaffleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "MAX_TICKETS_PER_NORMAL_PLAYER"
      | "MAX_TICKETS_PER_WHITELIST_PLAYER"
      | "RAFFLE_FEE"
      | "SLOTS_RESERVED_FOR_WHITELISTED"
      | "TOTAL_SLOTS"
      | "allTicketsWon"
      | "currentStage"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "normalSlots"
      | "players"
      | "purchaseTickets"
      | "purchaseTicketsForWhitelisted"
      | "reclaimMoney"
      | "renounceRole"
      | "revokeRole"
      | "selectWinners"
      | "setCurrentStage"
      | "setVault"
      | "setVerifier"
      | "supportsInterface"
      | "totalNormalTicketsPurchased"
      | "totalNormalWinningSlots"
      | "totalWhitelistedTicketsPurchased"
      | "vault"
      | "verifier"
      | "whitelistedPlayers"
      | "winningSlotsSelected"
      | "withdraw"
      | "withdrawn"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MoneyReclaimed"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TicketsPurchased"
      | "TokenWithdrawn"
      | "WhitelistedTicketsPurchased"
      | "WinnersSelected"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TICKETS_PER_NORMAL_PLAYER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TICKETS_PER_WHITELIST_PLAYER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RAFFLE_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SLOTS_RESERVED_FOR_WHITELISTED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_SLOTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allTicketsWon",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentStage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "normalSlots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseTickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseTicketsForWhitelisted",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimMoney",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "selectWinners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentStage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalNormalTicketsPurchased",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalNormalWinningSlots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWhitelistedTicketsPurchased",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistedPlayers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "winningSlotsSelected",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdrawn", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TICKETS_PER_NORMAL_PLAYER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TICKETS_PER_WHITELIST_PLAYER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RAFFLE_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SLOTS_RESERVED_FOR_WHITELISTED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_SLOTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allTicketsWon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "normalSlots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseTicketsForWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reclaimMoney",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selectWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalNormalTicketsPurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalNormalWinningSlots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWhitelistedTicketsPurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winningSlotsSelected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawn", data: BytesLike): Result;
}

export namespace MoneyReclaimedEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketsPurchasedEvent {
  export type InputTuple = [player: AddressLike, numberOfTickets: BigNumberish];
  export type OutputTuple = [player: string, numberOfTickets: bigint];
  export interface OutputObject {
    player: string;
    numberOfTickets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenWithdrawnEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistedTicketsPurchasedEvent {
  export type InputTuple = [player: AddressLike, numberOfTickets: BigNumberish];
  export type OutputTuple = [player: string, numberOfTickets: bigint];
  export interface OutputObject {
    player: string;
    numberOfTickets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnersSelectedEvent {
  export type InputTuple = [winners: AddressLike[]];
  export type OutputTuple = [winners: string[]];
  export interface OutputObject {
    winners: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChibiKingdomRaffle extends BaseContract {
  connect(runner?: ContractRunner | null): ChibiKingdomRaffle;
  waitForDeployment(): Promise<this>;

  interface: ChibiKingdomRaffleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_TICKETS_PER_NORMAL_PLAYER: TypedContractMethod<[], [bigint], "view">;

  MAX_TICKETS_PER_WHITELIST_PLAYER: TypedContractMethod<[], [bigint], "view">;

  RAFFLE_FEE: TypedContractMethod<[], [bigint], "view">;

  SLOTS_RESERVED_FOR_WHITELISTED: TypedContractMethod<[], [bigint], "view">;

  TOTAL_SLOTS: TypedContractMethod<[], [bigint], "view">;

  allTicketsWon: TypedContractMethod<[], [boolean], "view">;

  currentStage: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  normalSlots: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  players: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, boolean, boolean, bigint, bigint] & {
        joined: boolean;
        refunded: boolean;
        isWinner: boolean;
        numberOfTickets: bigint;
        winningTickets: bigint;
      }
    ],
    "view"
  >;

  purchaseTickets: TypedContractMethod<
    [numberOfTickets: BigNumberish],
    [void],
    "payable"
  >;

  purchaseTicketsForWhitelisted: TypedContractMethod<
    [
      numberOfTickets: BigNumberish,
      signature: BytesLike,
      expiredAt: BigNumberish
    ],
    [void],
    "payable"
  >;

  reclaimMoney: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  selectWinners: TypedContractMethod<
    [numberOfWinners: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCurrentStage: TypedContractMethod<
    [newStage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVault: TypedContractMethod<[vault_: AddressLike], [void], "nonpayable">;

  setVerifier: TypedContractMethod<
    [verifier_: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalNormalTicketsPurchased: TypedContractMethod<[], [bigint], "view">;

  totalNormalWinningSlots: TypedContractMethod<[], [bigint], "view">;

  totalWhitelistedTicketsPurchased: TypedContractMethod<[], [bigint], "view">;

  vault: TypedContractMethod<[], [string], "view">;

  verifier: TypedContractMethod<[], [string], "view">;

  whitelistedPlayers: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  winningSlotsSelected: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  withdrawn: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_TICKETS_PER_NORMAL_PLAYER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_TICKETS_PER_WHITELIST_PLAYER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RAFFLE_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SLOTS_RESERVED_FOR_WHITELISTED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOTAL_SLOTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allTicketsWon"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "currentStage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "normalSlots"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, boolean, boolean, bigint, bigint] & {
        joined: boolean;
        refunded: boolean;
        isWinner: boolean;
        numberOfTickets: bigint;
        winningTickets: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "purchaseTickets"
  ): TypedContractMethod<[numberOfTickets: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "purchaseTicketsForWhitelisted"
  ): TypedContractMethod<
    [
      numberOfTickets: BigNumberish,
      signature: BytesLike,
      expiredAt: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "reclaimMoney"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "selectWinners"
  ): TypedContractMethod<[numberOfWinners: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCurrentStage"
  ): TypedContractMethod<[newStage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVault"
  ): TypedContractMethod<[vault_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVerifier"
  ): TypedContractMethod<[verifier_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalNormalTicketsPurchased"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalNormalWinningSlots"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalWhitelistedTicketsPurchased"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "whitelistedPlayers"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "winningSlotsSelected"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawn"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "MoneyReclaimed"
  ): TypedContractEvent<
    MoneyReclaimedEvent.InputTuple,
    MoneyReclaimedEvent.OutputTuple,
    MoneyReclaimedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TicketsPurchased"
  ): TypedContractEvent<
    TicketsPurchasedEvent.InputTuple,
    TicketsPurchasedEvent.OutputTuple,
    TicketsPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "TokenWithdrawn"
  ): TypedContractEvent<
    TokenWithdrawnEvent.InputTuple,
    TokenWithdrawnEvent.OutputTuple,
    TokenWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistedTicketsPurchased"
  ): TypedContractEvent<
    WhitelistedTicketsPurchasedEvent.InputTuple,
    WhitelistedTicketsPurchasedEvent.OutputTuple,
    WhitelistedTicketsPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "WinnersSelected"
  ): TypedContractEvent<
    WinnersSelectedEvent.InputTuple,
    WinnersSelectedEvent.OutputTuple,
    WinnersSelectedEvent.OutputObject
  >;

  filters: {
    "MoneyReclaimed(address,uint256)": TypedContractEvent<
      MoneyReclaimedEvent.InputTuple,
      MoneyReclaimedEvent.OutputTuple,
      MoneyReclaimedEvent.OutputObject
    >;
    MoneyReclaimed: TypedContractEvent<
      MoneyReclaimedEvent.InputTuple,
      MoneyReclaimedEvent.OutputTuple,
      MoneyReclaimedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TicketsPurchased(address,uint256)": TypedContractEvent<
      TicketsPurchasedEvent.InputTuple,
      TicketsPurchasedEvent.OutputTuple,
      TicketsPurchasedEvent.OutputObject
    >;
    TicketsPurchased: TypedContractEvent<
      TicketsPurchasedEvent.InputTuple,
      TicketsPurchasedEvent.OutputTuple,
      TicketsPurchasedEvent.OutputObject
    >;

    "TokenWithdrawn(address,uint256)": TypedContractEvent<
      TokenWithdrawnEvent.InputTuple,
      TokenWithdrawnEvent.OutputTuple,
      TokenWithdrawnEvent.OutputObject
    >;
    TokenWithdrawn: TypedContractEvent<
      TokenWithdrawnEvent.InputTuple,
      TokenWithdrawnEvent.OutputTuple,
      TokenWithdrawnEvent.OutputObject
    >;

    "WhitelistedTicketsPurchased(address,uint256)": TypedContractEvent<
      WhitelistedTicketsPurchasedEvent.InputTuple,
      WhitelistedTicketsPurchasedEvent.OutputTuple,
      WhitelistedTicketsPurchasedEvent.OutputObject
    >;
    WhitelistedTicketsPurchased: TypedContractEvent<
      WhitelistedTicketsPurchasedEvent.InputTuple,
      WhitelistedTicketsPurchasedEvent.OutputTuple,
      WhitelistedTicketsPurchasedEvent.OutputObject
    >;

    "WinnersSelected(address[])": TypedContractEvent<
      WinnersSelectedEvent.InputTuple,
      WinnersSelectedEvent.OutputTuple,
      WinnersSelectedEvent.OutputObject
    >;
    WinnersSelected: TypedContractEvent<
      WinnersSelectedEvent.InputTuple,
      WinnersSelectedEvent.OutputTuple,
      WinnersSelectedEvent.OutputObject
    >;
  };
}
