/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type KingdomMetadataStruct = {
  transferEnabled: boolean;
  transferEnabledForBelowTier5: boolean;
  cooldownTime: BigNumberish;
  maxTier: BigNumberish;
  landBasePrice: BigNumberish;
  totalSupply: BigNumberish;
  remainingSlots: BigNumberish;
  tradingStartTime: BigNumberish;
  upgradeStartTime: BigNumberish;
};

export type KingdomMetadataStructOutput = [
  transferEnabled: boolean,
  transferEnabledForBelowTier5: boolean,
  cooldownTime: bigint,
  maxTier: bigint,
  landBasePrice: bigint,
  totalSupply: bigint,
  remainingSlots: bigint,
  tradingStartTime: bigint,
  upgradeStartTime: bigint
] & {
  transferEnabled: boolean;
  transferEnabledForBelowTier5: boolean;
  cooldownTime: bigint;
  maxTier: bigint;
  landBasePrice: bigint;
  totalSupply: bigint;
  remainingSlots: bigint;
  tradingStartTime: bigint;
  upgradeStartTime: bigint;
};

export type LandMetadataStruct = {
  tier: BigNumberish;
  appearance: BigNumberish;
  lastUpdatedAt: BigNumberish;
  fertilityPoint: BigNumberish;
  wealthPoint: BigNumberish;
  defensePoint: BigNumberish;
  prestigePoint: BigNumberish;
  listedForSale: boolean;
  price: BigNumberish;
  royaltyFee: BigNumberish;
  owner: AddressLike;
  name: string;
};

export type LandMetadataStructOutput = [
  tier: bigint,
  appearance: bigint,
  lastUpdatedAt: bigint,
  fertilityPoint: bigint,
  wealthPoint: bigint,
  defensePoint: bigint,
  prestigePoint: bigint,
  listedForSale: boolean,
  price: bigint,
  royaltyFee: bigint,
  owner: string,
  name: string
] & {
  tier: bigint;
  appearance: bigint;
  lastUpdatedAt: bigint;
  fertilityPoint: bigint;
  wealthPoint: bigint;
  defensePoint: bigint;
  prestigePoint: bigint;
  listedForSale: boolean;
  price: bigint;
  royaltyFee: bigint;
  owner: string;
  name: string;
};

export type LandStatsStruct = {
  fertilityPoint: BigNumberish;
  wealthPoint: BigNumberish;
  defensePoint: BigNumberish;
  prestigePoint: BigNumberish;
};

export type LandStatsStructOutput = [
  fertilityPoint: bigint,
  wealthPoint: bigint,
  defensePoint: bigint,
  prestigePoint: bigint
] & {
  fertilityPoint: bigint;
  wealthPoint: bigint;
  defensePoint: bigint;
  prestigePoint: bigint;
};

export interface ChibiKingdomV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASE_STAT"
      | "COOLDOWN_TIME"
      | "DEFAULT_ADMIN_ROLE"
      | "GAME_MANAGER_ROLE"
      | "LAND_PLOTS_RESERVED"
      | "MAX_TIER"
      | "MINTER_ROLE"
      | "ROYALTY_FEE_BEFORE_MAX_TIER"
      | "STAT_POINT_GAINED_PER_TIER"
      | "approve"
      | "balanceOf"
      | "clashToken"
      | "clashUpgradePriceByTiers"
      | "getApproved"
      | "getKingdom"
      | "getLand"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isApprovedForAll"
      | "landBasePrice"
      | "landDistribution"
      | "landNames"
      | "landPlotSupply"
      | "lands"
      | "listForSale"
      | "mint"
      | "mintBatch"
      | "name"
      | "owner"
      | "ownerOf"
      | "purchase"
      | "renounceRole"
      | "revokeRole"
      | "royaltyInfo"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setClashToken"
      | "setClashUpgradePriceByTiers"
      | "setDefaultRoyalty"
      | "setLandAppearance"
      | "setLandStats"
      | "setName"
      | "setStartTime"
      | "setTransferEnabled"
      | "setURI"
      | "setVerifier"
      | "setWhitelistedApprover"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalSupply"
      | "tradingStartTime"
      | "transferEnabled"
      | "transferEnabledForBelowTier5"
      | "transferFrom"
      | "upgrade"
      | "upgradeStartTime"
      | "upgradeWithClash"
      | "verifier"
      | "whitelistedApprovers"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "Initialized"
      | "LandUpgraded"
      | "MetadataUpdate"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(functionFragment: "BASE_STAT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "COOLDOWN_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GAME_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LAND_PLOTS_RESERVED",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_TIER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROYALTY_FEE_BEFORE_MAX_TIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAT_POINT_GAINED_PER_TIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "clashToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clashUpgradePriceByTiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getKingdom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLand",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "landBasePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "landDistribution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "landNames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "landPlotSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lands", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "listForSale",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [BigNumberish, boolean, string, boolean, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setClashToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setClashUpgradePriceByTiers",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultRoyalty",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLandAppearance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLandStats",
    values: [BigNumberish, LandStatsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setName",
    values: [BigNumberish, string, boolean, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStartTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferEnabled",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistedApprover",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferEnabledForBelowTier5",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [BigNumberish, boolean, string, boolean, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeWithClash",
    values: [BigNumberish, boolean, string, boolean, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistedApprovers",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "BASE_STAT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "COOLDOWN_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GAME_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LAND_PLOTS_RESERVED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_TIER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROYALTY_FEE_BEFORE_MAX_TIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAT_POINT_GAINED_PER_TIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clashToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clashUpgradePriceByTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getKingdom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLand", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "landBasePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "landDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "landNames", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "landPlotSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lands", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClashToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClashUpgradePriceByTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLandAppearance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLandStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistedApprover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferEnabledForBelowTier5",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeWithClash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedApprovers",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LandUpgradedEvent {
  export type InputTuple = [
    landId: BigNumberish,
    newOwner: AddressLike,
    newTier: BigNumberish
  ];
  export type OutputTuple = [landId: bigint, newOwner: string, newTier: bigint];
  export interface OutputObject {
    landId: bigint;
    newOwner: string;
    newTier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChibiKingdomV3 extends BaseContract {
  connect(runner?: ContractRunner | null): ChibiKingdomV3;
  waitForDeployment(): Promise<this>;

  interface: ChibiKingdomV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASE_STAT: TypedContractMethod<[], [bigint], "view">;

  COOLDOWN_TIME: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  GAME_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  LAND_PLOTS_RESERVED: TypedContractMethod<[], [bigint], "view">;

  MAX_TIER: TypedContractMethod<[], [bigint], "view">;

  MINTER_ROLE: TypedContractMethod<[], [string], "view">;

  ROYALTY_FEE_BEFORE_MAX_TIER: TypedContractMethod<[], [bigint], "view">;

  STAT_POINT_GAINED_PER_TIER: TypedContractMethod<[], [bigint], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  clashToken: TypedContractMethod<[], [string], "view">;

  clashUpgradePriceByTiers: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getKingdom: TypedContractMethod<[], [KingdomMetadataStructOutput], "view">;

  getLand: TypedContractMethod<
    [landId: BigNumberish],
    [LandMetadataStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoleMember: TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;

  getRoleMemberCount: TypedContractMethod<[role: BytesLike], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      minter_: AddressLike,
      treasury_: AddressLike,
      verifier_: AddressLike,
      landBasePrice_: BigNumberish,
      upgradeStartTime_: BigNumberish,
      tradingStartTime_: BigNumberish,
      landPlotSupply_: BigNumberish,
      baseUri: string
    ],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  landBasePrice: TypedContractMethod<[], [bigint], "view">;

  landDistribution: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  landNames: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  landPlotSupply: TypedContractMethod<[], [bigint], "view">;

  lands: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        tier: bigint;
        appearance: bigint;
        lastUpdatedAt: bigint;
        fertilityPoint: bigint;
        wealthPoint: bigint;
        defensePoint: bigint;
        prestigePoint: bigint;
        listedForSale: boolean;
        price: bigint;
      }
    ],
    "view"
  >;

  listForSale: TypedContractMethod<
    [landId: BigNumberish, listedForSale: boolean, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  mint: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintBatch: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  purchase: TypedContractMethod<
    [
      landId: BigNumberish,
      shouldChangeName: boolean,
      newName: string,
      landProtected: boolean,
      signature: BytesLike,
      expiredAt: BigNumberish
    ],
    [void],
    "payable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  royaltyInfo: TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint]],
    "view"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setClashToken: TypedContractMethod<
    [clashToken_: AddressLike],
    [void],
    "nonpayable"
  >;

  setClashUpgradePriceByTiers: TypedContractMethod<
    [tiers: BigNumberish[], prices: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setDefaultRoyalty: TypedContractMethod<
    [receiver: AddressLike, feeNumerator: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLandAppearance: TypedContractMethod<
    [landId: BigNumberish, appearance: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLandStats: TypedContractMethod<
    [landId: BigNumberish, stats: LandStatsStruct],
    [void],
    "nonpayable"
  >;

  setName: TypedContractMethod<
    [
      landId: BigNumberish,
      newName: string,
      landProtected: boolean,
      signature: BytesLike,
      expiredAt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setStartTime: TypedContractMethod<
    [upgradeStartTime_: BigNumberish, tradingStartTime_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTransferEnabled: TypedContractMethod<
    [transferEnabled_: boolean, transferEnabledForBelowTier5_: boolean],
    [void],
    "nonpayable"
  >;

  setURI: TypedContractMethod<[baseUri_: string], [void], "nonpayable">;

  setVerifier: TypedContractMethod<
    [verifier_: AddressLike],
    [void],
    "nonpayable"
  >;

  setWhitelistedApprover: TypedContractMethod<
    [approver: AddressLike, whitelisted: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  tradingStartTime: TypedContractMethod<[], [bigint], "view">;

  transferEnabled: TypedContractMethod<[], [boolean], "view">;

  transferEnabledForBelowTier5: TypedContractMethod<[], [boolean], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgrade: TypedContractMethod<
    [
      landId: BigNumberish,
      shouldChangeName: boolean,
      newName: string,
      landProtected: boolean,
      signature: BytesLike,
      expiredAt: BigNumberish
    ],
    [void],
    "payable"
  >;

  upgradeStartTime: TypedContractMethod<[], [bigint], "view">;

  upgradeWithClash: TypedContractMethod<
    [
      landId: BigNumberish,
      shouldChangeName: boolean,
      newName: string,
      landProtected: boolean,
      signature: BytesLike,
      expiredAt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  verifier: TypedContractMethod<[], [string], "view">;

  whitelistedApprovers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASE_STAT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COOLDOWN_TIME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GAME_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LAND_PLOTS_RESERVED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_TIER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MINTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROYALTY_FEE_BEFORE_MAX_TIER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STAT_POINT_GAINED_PER_TIER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "clashToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "clashUpgradePriceByTiers"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getKingdom"
  ): TypedContractMethod<[], [KingdomMetadataStructOutput], "view">;
  getFunction(
    nameOrSignature: "getLand"
  ): TypedContractMethod<
    [landId: BigNumberish],
    [LandMetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleMember"
  ): TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleMemberCount"
  ): TypedContractMethod<[role: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      minter_: AddressLike,
      treasury_: AddressLike,
      verifier_: AddressLike,
      landBasePrice_: BigNumberish,
      upgradeStartTime_: BigNumberish,
      tradingStartTime_: BigNumberish,
      landPlotSupply_: BigNumberish,
      baseUri: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "landBasePrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "landDistribution"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "landNames"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "landPlotSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lands"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        tier: bigint;
        appearance: bigint;
        lastUpdatedAt: bigint;
        fertilityPoint: bigint;
        wealthPoint: bigint;
        defensePoint: bigint;
        prestigePoint: bigint;
        listedForSale: boolean;
        price: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "listForSale"
  ): TypedContractMethod<
    [landId: BigNumberish, listedForSale: boolean, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintBatch"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "purchase"
  ): TypedContractMethod<
    [
      landId: BigNumberish,
      shouldChangeName: boolean,
      newName: string,
      landProtected: boolean,
      signature: BytesLike,
      expiredAt: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "royaltyInfo"
  ): TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setClashToken"
  ): TypedContractMethod<[clashToken_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setClashUpgradePriceByTiers"
  ): TypedContractMethod<
    [tiers: BigNumberish[], prices: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultRoyalty"
  ): TypedContractMethod<
    [receiver: AddressLike, feeNumerator: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLandAppearance"
  ): TypedContractMethod<
    [landId: BigNumberish, appearance: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLandStats"
  ): TypedContractMethod<
    [landId: BigNumberish, stats: LandStatsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setName"
  ): TypedContractMethod<
    [
      landId: BigNumberish,
      newName: string,
      landProtected: boolean,
      signature: BytesLike,
      expiredAt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStartTime"
  ): TypedContractMethod<
    [upgradeStartTime_: BigNumberish, tradingStartTime_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTransferEnabled"
  ): TypedContractMethod<
    [transferEnabled_: boolean, transferEnabledForBelowTier5_: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setURI"
  ): TypedContractMethod<[baseUri_: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVerifier"
  ): TypedContractMethod<[verifier_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWhitelistedApprover"
  ): TypedContractMethod<
    [approver: AddressLike, whitelisted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tradingStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferEnabledForBelowTier5"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgrade"
  ): TypedContractMethod<
    [
      landId: BigNumberish,
      shouldChangeName: boolean,
      newName: string,
      landProtected: boolean,
      signature: BytesLike,
      expiredAt: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "upgradeStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "upgradeWithClash"
  ): TypedContractMethod<
    [
      landId: BigNumberish,
      shouldChangeName: boolean,
      newName: string,
      landProtected: boolean,
      signature: BytesLike,
      expiredAt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "whitelistedApprovers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LandUpgraded"
  ): TypedContractEvent<
    LandUpgradedEvent.InputTuple,
    LandUpgradedEvent.OutputTuple,
    LandUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdate"
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LandUpgraded(uint256,address,uint256)": TypedContractEvent<
      LandUpgradedEvent.InputTuple,
      LandUpgradedEvent.OutputTuple,
      LandUpgradedEvent.OutputObject
    >;
    LandUpgraded: TypedContractEvent<
      LandUpgradedEvent.InputTuple,
      LandUpgradedEvent.OutputTuple,
      LandUpgradedEvent.OutputObject
    >;

    "MetadataUpdate(uint256)": TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
