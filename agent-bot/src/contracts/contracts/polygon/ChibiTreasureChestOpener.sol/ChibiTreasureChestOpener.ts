/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ChibiTreasureChestOpenerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_TOKENS_MINTED_PER_TX"
      | "openChests"
      | "treasureChestContract"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ChestOpened"): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_TOKENS_MINTED_PER_TX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openChests",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "treasureChestContract",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_TOKENS_MINTED_PER_TX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openChests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "treasureChestContract",
    data: BytesLike
  ): Result;
}

export namespace ChestOpenedEvent {
  export type InputTuple = [
    opener: AddressLike,
    transactionId: BigNumberish,
    to: AddressLike,
    bronzeChests: BigNumberish,
    silverChests: BigNumberish,
    goldChests: BigNumberish,
    platinumChests: BigNumberish
  ];
  export type OutputTuple = [
    opener: string,
    transactionId: bigint,
    to: string,
    bronzeChests: bigint,
    silverChests: bigint,
    goldChests: bigint,
    platinumChests: bigint
  ];
  export interface OutputObject {
    opener: string;
    transactionId: bigint;
    to: string;
    bronzeChests: bigint;
    silverChests: bigint;
    goldChests: bigint;
    platinumChests: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChibiTreasureChestOpener extends BaseContract {
  connect(runner?: ContractRunner | null): ChibiTreasureChestOpener;
  waitForDeployment(): Promise<this>;

  interface: ChibiTreasureChestOpenerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_TOKENS_MINTED_PER_TX: TypedContractMethod<[], [bigint], "view">;

  openChests: TypedContractMethod<
    [
      to: AddressLike,
      bronzeChests: BigNumberish,
      silverChests: BigNumberish,
      goldChests: BigNumberish,
      platinumChests: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  treasureChestContract: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_TOKENS_MINTED_PER_TX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "openChests"
  ): TypedContractMethod<
    [
      to: AddressLike,
      bronzeChests: BigNumberish,
      silverChests: BigNumberish,
      goldChests: BigNumberish,
      platinumChests: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "treasureChestContract"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ChestOpened"
  ): TypedContractEvent<
    ChestOpenedEvent.InputTuple,
    ChestOpenedEvent.OutputTuple,
    ChestOpenedEvent.OutputObject
  >;

  filters: {
    "ChestOpened(address,uint256,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ChestOpenedEvent.InputTuple,
      ChestOpenedEvent.OutputTuple,
      ChestOpenedEvent.OutputObject
    >;
    ChestOpened: TypedContractEvent<
      ChestOpenedEvent.InputTuple,
      ChestOpenedEvent.OutputTuple,
      ChestOpenedEvent.OutputObject
    >;
  };
}
