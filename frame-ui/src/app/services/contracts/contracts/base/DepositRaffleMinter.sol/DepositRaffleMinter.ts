/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace DepositRaffleMinter {
  export type ClaimInfoStruct = {
    hasClaimed: boolean;
    refundAmount: BigNumberish;
    nftCount: BigNumberish;
  };

  export type ClaimInfoStructOutput = [
    hasClaimed: boolean,
    refundAmount: bigint,
    nftCount: bigint
  ] & { hasClaimed: boolean; refundAmount: bigint; nftCount: bigint };

  export type BidStruct = {
    id: BigNumberish;
    bidder: AddressLike;
    timestamp: BigNumberish;
    share: BigNumberish;
    price: BigNumberish;
  };

  export type BidStructOutput = [
    id: bigint,
    bidder: string,
    timestamp: bigint,
    share: bigint,
    price: bigint
  ] & {
    id: bigint;
    bidder: string;
    timestamp: bigint;
    share: bigint;
    price: bigint;
  };
}

export interface DepositRaffleMinterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "MANAGER_ROLE"
      | "auctionEndTime"
      | "auctionStartTime"
      | "bidIndex"
      | "bids"
      | "claimAndRefund"
      | "claimInfo"
      | "deposit"
      | "gateway"
      | "getBidAmtByBuyerId"
      | "getRoleAdmin"
      | "getTotalBidsCnt"
      | "getUserBids"
      | "getUserClaimInfos"
      | "getWinnerBids"
      | "grantRole"
      | "hasClaimed"
      | "hasRole"
      | "limitForBuyerAmount"
      | "maxShare"
      | "nftAddress"
      | "nftAmount"
      | "nftPrice"
      | "paymentRecipient"
      | "paymentSent"
      | "renounceRole"
      | "revokeRole"
      | "sendPayment"
      | "setAuctionEndTime"
      | "setAuctionStartTime"
      | "setGateway"
      | "setLimitForBuyerAmount"
      | "setNftAddress"
      | "setNftAmount"
      | "setRecipient"
      | "supportsInterface"
      | "tvl"
      | "unitPrice"
      | "userBids"
      | "winStart"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Claim"
      | "Deposit"
      | "Initialized"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bidIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bids", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "claimAndRefund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gateway", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBidAmtByBuyerId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBidsCnt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBids",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserClaimInfos",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinnerBids",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "limitForBuyerAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxShare", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nftAmount", values?: undefined): string;
  encodeFunctionData(functionFragment: "nftPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentSent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionStartTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGateway",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimitForBuyerAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "tvl", values?: undefined): string;
  encodeFunctionData(functionFragment: "unitPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userBids",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "winStart", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bidIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAndRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gateway", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBidAmtByBuyerId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBidsCnt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserClaimInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinnerBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "limitForBuyerAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxShare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentSent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGateway", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLimitForBuyerAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tvl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unitPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userBids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winStart", data: BytesLike): Result;
}

export namespace ClaimEvent {
  export type InputTuple = [
    buyer: AddressLike,
    refundAmount: BigNumberish,
    nftCount: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    refundAmount: bigint,
    nftCount: bigint
  ];
  export interface OutputObject {
    buyer: string;
    refundAmount: bigint;
    nftCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    buyer: AddressLike,
    unitPrice: BigNumberish,
    share: BigNumberish
  ];
  export type OutputTuple = [buyer: string, unitPrice: bigint, share: bigint];
  export interface OutputObject {
    buyer: string;
    unitPrice: bigint;
    share: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DepositRaffleMinter extends BaseContract {
  connect(runner?: ContractRunner | null): DepositRaffleMinter;
  waitForDeployment(): Promise<this>;

  interface: DepositRaffleMinterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  auctionEndTime: TypedContractMethod<[], [bigint], "view">;

  auctionStartTime: TypedContractMethod<[], [bigint], "view">;

  bidIndex: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  bids: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint] & {
        id: bigint;
        bidder: string;
        timestamp: bigint;
        share: bigint;
        price: bigint;
      }
    ],
    "view"
  >;

  claimAndRefund: TypedContractMethod<[], [void], "nonpayable">;

  claimInfo: TypedContractMethod<
    [_a: AddressLike],
    [DepositRaffleMinter.ClaimInfoStructOutput],
    "view"
  >;

  deposit: TypedContractMethod<[share: BigNumberish], [void], "payable">;

  gateway: TypedContractMethod<[], [string], "view">;

  getBidAmtByBuyerId: TypedContractMethod<
    [_buyer: AddressLike],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTotalBidsCnt: TypedContractMethod<[], [bigint], "view">;

  getUserBids: TypedContractMethod<
    [_addresses: AddressLike[]],
    [DepositRaffleMinter.BidStructOutput[][]],
    "view"
  >;

  getUserClaimInfos: TypedContractMethod<
    [_addresses: AddressLike[]],
    [DepositRaffleMinter.ClaimInfoStructOutput[]],
    "view"
  >;

  getWinnerBids: TypedContractMethod<
    [startIdx: BigNumberish, batchSize: BigNumberish],
    [DepositRaffleMinter.BidStructOutput[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasClaimed: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  limitForBuyerAmount: TypedContractMethod<[], [bigint], "view">;

  maxShare: TypedContractMethod<[], [bigint], "view">;

  nftAddress: TypedContractMethod<[], [string], "view">;

  nftAmount: TypedContractMethod<[], [bigint], "view">;

  nftPrice: TypedContractMethod<[], [bigint], "view">;

  paymentRecipient: TypedContractMethod<[], [string], "view">;

  paymentSent: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  sendPayment: TypedContractMethod<[], [void], "nonpayable">;

  setAuctionEndTime: TypedContractMethod<
    [_t: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAuctionStartTime: TypedContractMethod<
    [_t: BigNumberish],
    [void],
    "nonpayable"
  >;

  setGateway: TypedContractMethod<[_g: AddressLike], [void], "nonpayable">;

  setLimitForBuyerAmount: TypedContractMethod<
    [_amt: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNftAddress: TypedContractMethod<
    [_addr: AddressLike],
    [void],
    "nonpayable"
  >;

  setNftAmount: TypedContractMethod<[_amt: BigNumberish], [void], "nonpayable">;

  setRecipient: TypedContractMethod<[_r: AddressLike], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tvl: TypedContractMethod<[], [bigint], "view">;

  unitPrice: TypedContractMethod<[], [bigint], "view">;

  userBids: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint] & {
        id: bigint;
        bidder: string;
        timestamp: bigint;
        share: bigint;
        price: bigint;
      }
    ],
    "view"
  >;

  winStart: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "auctionEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "auctionStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bidIndex"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "bids"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint] & {
        id: bigint;
        bidder: string;
        timestamp: bigint;
        share: bigint;
        price: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimAndRefund"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimInfo"
  ): TypedContractMethod<
    [_a: AddressLike],
    [DepositRaffleMinter.ClaimInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[share: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "gateway"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBidAmtByBuyerId"
  ): TypedContractMethod<[_buyer: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalBidsCnt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserBids"
  ): TypedContractMethod<
    [_addresses: AddressLike[]],
    [DepositRaffleMinter.BidStructOutput[][]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserClaimInfos"
  ): TypedContractMethod<
    [_addresses: AddressLike[]],
    [DepositRaffleMinter.ClaimInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWinnerBids"
  ): TypedContractMethod<
    [startIdx: BigNumberish, batchSize: BigNumberish],
    [DepositRaffleMinter.BidStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasClaimed"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "limitForBuyerAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxShare"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nftAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nftAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nftPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "paymentRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paymentSent"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendPayment"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAuctionEndTime"
  ): TypedContractMethod<[_t: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAuctionStartTime"
  ): TypedContractMethod<[_t: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGateway"
  ): TypedContractMethod<[_g: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLimitForBuyerAmount"
  ): TypedContractMethod<[_amt: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNftAddress"
  ): TypedContractMethod<[_addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNftAmount"
  ): TypedContractMethod<[_amt: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRecipient"
  ): TypedContractMethod<[_r: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tvl"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unitPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userBids"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint] & {
        id: bigint;
        bidder: string;
        timestamp: bigint;
        share: bigint;
        price: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "winStart"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Claim"
  ): TypedContractEvent<
    ClaimEvent.InputTuple,
    ClaimEvent.OutputTuple,
    ClaimEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "Claim(address,uint256,uint256)": TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;
    Claim: TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;

    "Deposit(address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
