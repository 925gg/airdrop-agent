/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IGatewayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ERC1155_mint"
      | "ERC1155_mintBatch"
      | "ERC1155_setURI"
      | "ERC20_mint"
      | "ERC721_mint"
      | "ERC721_mintBatch"
      | "ERC721_setURI"
      | "isInManagement"
      | "nftManager"
      | "operatorWhitelist"
      | "pause"
      | "setManagerOf"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ERC1155_mint",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC1155_mintBatch",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC1155_setURI",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC20_mint",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721_mint",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721_mintBatch",
    values: [AddressLike, AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721_setURI",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInManagement",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nftManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setManagerOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unpause",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ERC1155_mint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC1155_mintBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC1155_setURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ERC20_mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ERC721_mint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC721_mintBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC721_setURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setManagerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export interface IGateway extends BaseContract {
  connect(runner?: ContractRunner | null): IGateway;
  waitForDeployment(): Promise<this>;

  interface: IGatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ERC1155_mint: TypedContractMethod<
    [
      nftContract: AddressLike,
      account: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  ERC1155_mintBatch: TypedContractMethod<
    [
      nftContract: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  ERC1155_setURI: TypedContractMethod<
    [nftContract: AddressLike, newuri: string],
    [void],
    "nonpayable"
  >;

  ERC20_mint: TypedContractMethod<
    [erc20Contract: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  ERC721_mint: TypedContractMethod<
    [nftContract: AddressLike, recipient: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  ERC721_mintBatch: TypedContractMethod<
    [nftContract: AddressLike, recipient: AddressLike, tokenId: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  ERC721_setURI: TypedContractMethod<
    [nftContract: AddressLike, newURI: string],
    [void],
    "nonpayable"
  >;

  isInManagement: TypedContractMethod<
    [_x: AddressLike, _tokenContract: AddressLike],
    [boolean],
    "view"
  >;

  nftManager: TypedContractMethod<
    [_nftContract: AddressLike],
    [string],
    "view"
  >;

  operatorWhitelist: TypedContractMethod<
    [_operator: AddressLike],
    [boolean],
    "view"
  >;

  pause: TypedContractMethod<[_contract: AddressLike], [void], "nonpayable">;

  setManagerOf: TypedContractMethod<
    [_nftContract: AddressLike, _manager: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[_contract: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ERC1155_mint"
  ): TypedContractMethod<
    [
      nftContract: AddressLike,
      account: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ERC1155_mintBatch"
  ): TypedContractMethod<
    [
      nftContract: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ERC1155_setURI"
  ): TypedContractMethod<
    [nftContract: AddressLike, newuri: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ERC20_mint"
  ): TypedContractMethod<
    [erc20Contract: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ERC721_mint"
  ): TypedContractMethod<
    [nftContract: AddressLike, recipient: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ERC721_mintBatch"
  ): TypedContractMethod<
    [nftContract: AddressLike, recipient: AddressLike, tokenId: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ERC721_setURI"
  ): TypedContractMethod<
    [nftContract: AddressLike, newURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isInManagement"
  ): TypedContractMethod<
    [_x: AddressLike, _tokenContract: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nftManager"
  ): TypedContractMethod<[_nftContract: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "operatorWhitelist"
  ): TypedContractMethod<[_operator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[_contract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setManagerOf"
  ): TypedContractMethod<
    [_nftContract: AddressLike, _manager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[_contract: AddressLike], [void], "nonpayable">;

  filters: {};
}
