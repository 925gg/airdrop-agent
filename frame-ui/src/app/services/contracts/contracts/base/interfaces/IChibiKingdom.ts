/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type KingdomMetadataStruct = {
  transferEnabled: boolean;
  transferEnabledForBelowTier5: boolean;
  cooldownTime: BigNumberish;
  maxTier: BigNumberish;
  landBasePrice: BigNumberish;
  totalSupply: BigNumberish;
  remainingSlots: BigNumberish;
  tradingStartTime: BigNumberish;
  upgradeStartTime: BigNumberish;
};

export type KingdomMetadataStructOutput = [
  transferEnabled: boolean,
  transferEnabledForBelowTier5: boolean,
  cooldownTime: bigint,
  maxTier: bigint,
  landBasePrice: bigint,
  totalSupply: bigint,
  remainingSlots: bigint,
  tradingStartTime: bigint,
  upgradeStartTime: bigint
] & {
  transferEnabled: boolean;
  transferEnabledForBelowTier5: boolean;
  cooldownTime: bigint;
  maxTier: bigint;
  landBasePrice: bigint;
  totalSupply: bigint;
  remainingSlots: bigint;
  tradingStartTime: bigint;
  upgradeStartTime: bigint;
};

export type LandMetadataStruct = {
  tier: BigNumberish;
  appearance: BigNumberish;
  lastUpdatedAt: BigNumberish;
  fertilityPoint: BigNumberish;
  wealthPoint: BigNumberish;
  defensePoint: BigNumberish;
  prestigePoint: BigNumberish;
  listedForSale: boolean;
  price: BigNumberish;
  royaltyFee: BigNumberish;
  owner: AddressLike;
  name: string;
};

export type LandMetadataStructOutput = [
  tier: bigint,
  appearance: bigint,
  lastUpdatedAt: bigint,
  fertilityPoint: bigint,
  wealthPoint: bigint,
  defensePoint: bigint,
  prestigePoint: bigint,
  listedForSale: boolean,
  price: bigint,
  royaltyFee: bigint,
  owner: string,
  name: string
] & {
  tier: bigint;
  appearance: bigint;
  lastUpdatedAt: bigint;
  fertilityPoint: bigint;
  wealthPoint: bigint;
  defensePoint: bigint;
  prestigePoint: bigint;
  listedForSale: boolean;
  price: bigint;
  royaltyFee: bigint;
  owner: string;
  name: string;
};

export type LandStatsStruct = {
  fertilityPoint: BigNumberish;
  wealthPoint: BigNumberish;
  defensePoint: BigNumberish;
  prestigePoint: BigNumberish;
};

export type LandStatsStructOutput = [
  fertilityPoint: bigint,
  wealthPoint: bigint,
  defensePoint: bigint,
  prestigePoint: bigint
] & {
  fertilityPoint: bigint;
  wealthPoint: bigint;
  defensePoint: bigint;
  prestigePoint: bigint;
};

export interface IChibiKingdomInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getKingdom"
      | "getLand"
      | "listForSale"
      | "mint"
      | "mintBatch"
      | "owner"
      | "purchase"
      | "setDefaultRoyalty"
      | "setLandAppearance"
      | "setLandStats"
      | "setName"
      | "setStartTime"
      | "setTransferEnabled"
      | "setURI"
      | "setVerifier"
      | "setWhitelistedApprover"
      | "totalSupply"
      | "upgrade"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getKingdom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLand",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listForSale",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [BigNumberish, boolean, string, boolean, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultRoyalty",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLandAppearance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLandStats",
    values: [BigNumberish, LandStatsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setName",
    values: [BigNumberish, string, boolean, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStartTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferEnabled",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistedApprover",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [BigNumberish, boolean, string, boolean, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getKingdom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLand", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLandAppearance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLandStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistedApprover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
}

export interface IChibiKingdom extends BaseContract {
  connect(runner?: ContractRunner | null): IChibiKingdom;
  waitForDeployment(): Promise<this>;

  interface: IChibiKingdomInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getKingdom: TypedContractMethod<[], [KingdomMetadataStructOutput], "view">;

  getLand: TypedContractMethod<
    [landId: BigNumberish],
    [LandMetadataStructOutput],
    "view"
  >;

  listForSale: TypedContractMethod<
    [landId: BigNumberish, listedForSale: boolean, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  mint: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintBatch: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  purchase: TypedContractMethod<
    [
      landId: BigNumberish,
      shouldChangeName: boolean,
      newName: string,
      landProtected: boolean,
      signature: BytesLike,
      expiredAt: BigNumberish
    ],
    [void],
    "payable"
  >;

  setDefaultRoyalty: TypedContractMethod<
    [receiver: AddressLike, feeNumerator: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLandAppearance: TypedContractMethod<
    [landId: BigNumberish, appearance: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLandStats: TypedContractMethod<
    [landId: BigNumberish, stats: LandStatsStruct],
    [void],
    "nonpayable"
  >;

  setName: TypedContractMethod<
    [
      landId: BigNumberish,
      newName: string,
      landProtected: boolean,
      signature: BytesLike,
      expiredAt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setStartTime: TypedContractMethod<
    [upgradeStartTime_: BigNumberish, tradingStartTime_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTransferEnabled: TypedContractMethod<
    [transferEnabled_: boolean, transferEnabledForBelowTier5_: boolean],
    [void],
    "nonpayable"
  >;

  setURI: TypedContractMethod<[newBaseURI: string], [void], "nonpayable">;

  setVerifier: TypedContractMethod<
    [verifier_: AddressLike],
    [void],
    "nonpayable"
  >;

  setWhitelistedApprover: TypedContractMethod<
    [approver: AddressLike, whitelisted: boolean],
    [void],
    "nonpayable"
  >;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  upgrade: TypedContractMethod<
    [
      landId: BigNumberish,
      shouldChangeName: boolean,
      newName: string,
      landProtected: boolean,
      signature: BytesLike,
      expiredAt: BigNumberish
    ],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getKingdom"
  ): TypedContractMethod<[], [KingdomMetadataStructOutput], "view">;
  getFunction(
    nameOrSignature: "getLand"
  ): TypedContractMethod<
    [landId: BigNumberish],
    [LandMetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "listForSale"
  ): TypedContractMethod<
    [landId: BigNumberish, listedForSale: boolean, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintBatch"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "purchase"
  ): TypedContractMethod<
    [
      landId: BigNumberish,
      shouldChangeName: boolean,
      newName: string,
      landProtected: boolean,
      signature: BytesLike,
      expiredAt: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setDefaultRoyalty"
  ): TypedContractMethod<
    [receiver: AddressLike, feeNumerator: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLandAppearance"
  ): TypedContractMethod<
    [landId: BigNumberish, appearance: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLandStats"
  ): TypedContractMethod<
    [landId: BigNumberish, stats: LandStatsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setName"
  ): TypedContractMethod<
    [
      landId: BigNumberish,
      newName: string,
      landProtected: boolean,
      signature: BytesLike,
      expiredAt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStartTime"
  ): TypedContractMethod<
    [upgradeStartTime_: BigNumberish, tradingStartTime_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTransferEnabled"
  ): TypedContractMethod<
    [transferEnabled_: boolean, transferEnabledForBelowTier5_: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setURI"
  ): TypedContractMethod<[newBaseURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVerifier"
  ): TypedContractMethod<[verifier_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWhitelistedApprover"
  ): TypedContractMethod<
    [approver: AddressLike, whitelisted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "upgrade"
  ): TypedContractMethod<
    [
      landId: BigNumberish,
      shouldChangeName: boolean,
      newName: string,
      landProtected: boolean,
      signature: BytesLike,
      expiredAt: BigNumberish
    ],
    [void],
    "payable"
  >;

  filters: {};
}
