/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ChibiTreasureChestPrizeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "chibiTreasureChestContract"
      | "claimPrize"
      | "owner"
      | "renounceOwnership"
      | "setVerifier"
      | "transactions"
      | "transferOwnership"
      | "verifier"
      | "withdrawErc20"
      | "withdrawErc721"
      | "withdrawNativeToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Claimed"
      | "OwnershipTransferred"
      | "ReceivedERC20Token"
      | "ReceivedERC721Token"
      | "ReceivedNativeToken"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "chibiTreasureChestContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimPrize",
    values: [AddressLike, BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawErc20",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawErc721",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNativeToken",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "chibiTreasureChestContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimPrize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawErc721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNativeToken",
    data: BytesLike
  ): Result;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    to: AddressLike,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    transactionId: string
  ];
  export type OutputTuple = [
    to: string,
    ids: bigint[],
    amounts: bigint[],
    transactionId: string
  ];
  export interface OutputObject {
    to: string;
    ids: bigint[];
    amounts: bigint[];
    transactionId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedERC20TokenEvent {
  export type InputTuple = [
    receiver: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [receiver: string, token: string, amount: bigint];
  export interface OutputObject {
    receiver: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedERC721TokenEvent {
  export type InputTuple = [
    receiver: AddressLike,
    token: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [receiver: string, token: string, tokenId: bigint];
  export interface OutputObject {
    receiver: string;
    token: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedNativeTokenEvent {
  export type InputTuple = [receiver: AddressLike, amount: BigNumberish];
  export type OutputTuple = [receiver: string, amount: bigint];
  export interface OutputObject {
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChibiTreasureChestPrize extends BaseContract {
  connect(runner?: ContractRunner | null): ChibiTreasureChestPrize;
  waitForDeployment(): Promise<this>;

  interface: ChibiTreasureChestPrizeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  chibiTreasureChestContract: TypedContractMethod<[], [string], "view">;

  claimPrize: TypedContractMethod<
    [
      to: AddressLike,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      transactionId: string
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setVerifier: TypedContractMethod<
    [verifier_: AddressLike],
    [void],
    "nonpayable"
  >;

  transactions: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifier: TypedContractMethod<[], [string], "view">;

  withdrawErc20: TypedContractMethod<
    [erc20token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawErc721: TypedContractMethod<
    [erc721Token: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawNativeToken: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "chibiTreasureChestContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimPrize"
  ): TypedContractMethod<
    [
      to: AddressLike,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      transactionId: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVerifier"
  ): TypedContractMethod<[verifier_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transactions"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawErc20"
  ): TypedContractMethod<
    [erc20token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawErc721"
  ): TypedContractMethod<
    [erc721Token: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawNativeToken"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ReceivedERC20Token"
  ): TypedContractEvent<
    ReceivedERC20TokenEvent.InputTuple,
    ReceivedERC20TokenEvent.OutputTuple,
    ReceivedERC20TokenEvent.OutputObject
  >;
  getEvent(
    key: "ReceivedERC721Token"
  ): TypedContractEvent<
    ReceivedERC721TokenEvent.InputTuple,
    ReceivedERC721TokenEvent.OutputTuple,
    ReceivedERC721TokenEvent.OutputObject
  >;
  getEvent(
    key: "ReceivedNativeToken"
  ): TypedContractEvent<
    ReceivedNativeTokenEvent.InputTuple,
    ReceivedNativeTokenEvent.OutputTuple,
    ReceivedNativeTokenEvent.OutputObject
  >;

  filters: {
    "Claimed(address,uint256[],uint256[],string)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ReceivedERC20Token(address,address,uint256)": TypedContractEvent<
      ReceivedERC20TokenEvent.InputTuple,
      ReceivedERC20TokenEvent.OutputTuple,
      ReceivedERC20TokenEvent.OutputObject
    >;
    ReceivedERC20Token: TypedContractEvent<
      ReceivedERC20TokenEvent.InputTuple,
      ReceivedERC20TokenEvent.OutputTuple,
      ReceivedERC20TokenEvent.OutputObject
    >;

    "ReceivedERC721Token(address,address,uint256)": TypedContractEvent<
      ReceivedERC721TokenEvent.InputTuple,
      ReceivedERC721TokenEvent.OutputTuple,
      ReceivedERC721TokenEvent.OutputObject
    >;
    ReceivedERC721Token: TypedContractEvent<
      ReceivedERC721TokenEvent.InputTuple,
      ReceivedERC721TokenEvent.OutputTuple,
      ReceivedERC721TokenEvent.OutputObject
    >;

    "ReceivedNativeToken(address,uint256)": TypedContractEvent<
      ReceivedNativeTokenEvent.InputTuple,
      ReceivedNativeTokenEvent.OutputTuple,
      ReceivedNativeTokenEvent.OutputObject
    >;
    ReceivedNativeToken: TypedContractEvent<
      ReceivedNativeTokenEvent.InputTuple,
      ReceivedNativeTokenEvent.OutputTuple,
      ReceivedNativeTokenEvent.OutputObject
    >;
  };
}
