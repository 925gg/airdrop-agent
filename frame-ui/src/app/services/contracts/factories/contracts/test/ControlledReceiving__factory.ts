/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ControlledReceiving,
  ControlledReceivingInterface,
} from "../../../contracts/test/ControlledReceiving";

const _abi = [
  {
    inputs: [],
    name: "ReceivingTokenNotAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "value",
        type: "bool",
      },
    ],
    name: "setAllowReceiving",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040526000805460ff1916600117905534801561001d57600080fd5b5060d48061002c6000396000f3fe60806040526004361060205760003560e01c80634cf44ced14604d57600080fd5b3660485760005460ff16604657604051633e09d71d60e21b815260040160405180910390fd5b005b600080fd5b348015605857600080fd5b50604660643660046077565b6000805460ff1916911515919091179055565b600060208284031215608857600080fd5b81358015158114609757600080fd5b939250505056fea2646970667358221220e2c364cbdcfdee8f6030c81c3cbca01e12b68fb7aaa4c8fd485e9c6626f6a1bf64736f6c63430008130033";

type ControlledReceivingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ControlledReceivingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ControlledReceiving__factory extends ContractFactory {
  constructor(...args: ControlledReceivingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ControlledReceiving & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): ControlledReceiving__factory {
    return super.connect(runner) as ControlledReceiving__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ControlledReceivingInterface {
    return new Interface(_abi) as ControlledReceivingInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ControlledReceiving {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ControlledReceiving;
  }
}
